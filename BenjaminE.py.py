# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bYIlcusWr6fzTHAgxwjSDNdFcZPT62dM
"""

# Solicitudes de HTTP.
import requests
# Implementamos el formato JSON.
import json

# Definimos la funcion de coordenadas geograficas, utilizando la API "MApquestapi".
def obtener_coordenadas(ciudad):
    url = "http://www.mapquestapi.com/geocoding/v1/address"
    params = {
        "key": "N4OqADCoTi0jZwJskM1jPJwbm8h3L5D7",
        "location": ciudad,
        "maxResults": 1,
        "thumbMaps": False
    }
    response = requests.get(url, params=params)
    data = response.json()
    lat = data["results"][0]["locations"][0]["latLng"]["lat"]
    lng = data["results"][0]["locations"][0]["latLng"]["lng"]
    return lat, lng

# Se hace el calculo de la distancia utilizando la API.
def calcular_distancia(origen, destino):
    url = "http://www.mapquestapi.com/directions/v2/route"
    params = {
        "key": "N4OqADCoTi0jZwJskM1jPJwbm8h3L5D7",
        "from": origen,
        "to": destino,
        "unit": "k"
    }
    response = requests.get(url, params=params)
    data = response.json()
    distance = data["route"]["distance"]
    return distance

# Se calcula el tiempo en las unidades de medidas solicitadas.
def convertir_tiempo(segundos):
    horas = segundos // 3600
    minutos = (segundos % 3600) // 60
    segundos = segundos % 60
    return horas, minutos, segundos

# Solicitar las ciudades de origen y destino.
# Inicia el bucle infinito.
while True:
  # Se solicita al usuario que ingrese una ciudad de origen. 
    origen = input("Ciudad de origen (s para salir): ")
    # Se añade la funcion de salida con la letra "S", asignada.
    if origen.lower() == "s":
        break
# Ingreso de la ciudad de destino.
    destino = input("Ciudad de destino: ")
    if destino.lower() == "s":
        break

    # Verificar si las ciudades son válidas.
    if obtener_coordenadas(origen) and obtener_coordenadas(destino):
        break
    else:
        print("Intente de nuevo ingresando ciudades válidas.")

# Calcular la distancia si no se ha ingresado "s" para salir.
if origen.lower() != "s" and destino.lower() != "s":
    distancia = calcular_distancia(origen, destino)

    # Calcular la duración del viaje asumiendo una velocidad promedio de 100 km/h.
    duracion_segundos = distancia / 100 * 3600

    # Convertir la duración a horas, minutos y segundos.
    horas, minutos, segundos = convertir_tiempo(duracion_segundos)

    # Imprimir los resultados.
    print("Distancia:", round(distancia, 1), "km")
    print("Duración del viaje:", round(horas,), "horas,", round(minutos,), "minutos,", round(segundos,), "segundos")

    # Crear un diccionario con los resultados.
    resultados = {
        "Distancia": round(distancia, 1),
        "Duración del viaje": f"{round(horas,)} horas, {round(minutos,)} minutos, {round(segundos,)} segundos"
    }

    # Guardar los resultados en un archivo JSON.
    with open("resultados.json", "w") as file:
      # Funcion DUMP, hace legible el codigo.
        json.dump(resultados, file)